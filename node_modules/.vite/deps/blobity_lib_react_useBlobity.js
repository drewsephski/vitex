import {
  require_react
} from "./chunk-575JY5N6.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js"(exports, module) {
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce;
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/throttle.js"(exports, module) {
    var debounce = require_debounce();
    var isObject = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle;
  }
});

// node_modules/.pnpm/kinet@2.2.1/node_modules/kinet/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/kinet@2.2.1/node_modules/kinet/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Kinet = function() {
      function Kinet2(options) {
        var _this = this;
        _classCallCheck(this, Kinet2);
        this._handlers = {
          set: [],
          start: [],
          tick: [],
          end: []
        };
        var dafaults = {
          friction: 1 - 0.3,
          acceleration: 0.04,
          initialValue: 0,
          names: ["x"],
          test: function test(instance) {
            return Math.abs(instance.current - instance.target) > 0.1;
          }
        };
        this._options = _extends({}, dafaults, options);
        if (options && options.friction) {
          this._options.friction = 1 - options.friction;
        }
        this._instances = {};
        this._options.names.forEach(function(name) {
          _this._instances[name] = new KinetItem(_this._options.initialValue, _this._options.acceleration, _this._options.friction);
        });
        this._raf = null;
      }
      _createClass(Kinet2, [{
        key: "set",
        value: function set(name, num) {
          var _this2 = this;
          if (num == null) {
            console.warn("Define a value.");
            return;
          }
          if (this._instances[name] == null) {
            console.warn('Instance "' + name + `" doesn't exist.`);
            return;
          }
          this._instances[name].current = num;
          this._instances[name].target = num;
          if (!this._raf) {
            this._handlers["set"].forEach(function(handler) {
              return handler(_this2._instances);
            });
            this._handlers["tick"].forEach(function(handler) {
              return handler(_this2._instances);
            });
          }
        }
      }, {
        key: "animate",
        value: function animate(name, num) {
          var _this3 = this;
          if (num == null) {
            console.warn("Define a value.");
            return;
          }
          if (this._instances[name] == null) {
            console.warn("Instance " + name + " doesn't exist.");
            return;
          }
          if (this._instances[name].target !== num) {
            this._instances[name].target = num;
            if (!this._raf) {
              this._handlers["start"].forEach(function(handler) {
                return handler(_this3._instances, _this3._instances);
              });
              this._animateValues();
            }
            return num;
          }
          return false;
        }
      }, {
        key: "_animateValues",
        value: function _animateValues() {
          var _this4 = this;
          var done = true;
          Object.keys(this._instances).forEach(function(key) {
            _this4._instances[key].update();
            if (_this4._options.test(_this4._instances[key])) {
              done = false;
            }
          });
          if (!done) {
            this._raf = requestAnimationFrame(this._animateValues.bind(this));
            this._handlers["tick"].forEach(function(handler) {
              return handler(_this4._instances);
            });
          } else {
            Object.keys(this._instances).forEach(function(key) {
              _this4._instances[key].current = _this4._instances[key].target;
              _this4._instances[key].velocity = 0;
            });
            this._handlers["tick"].forEach(function(handler) {
              return handler(_this4._instances);
            });
            this._handlers["end"].forEach(function(handler) {
              return handler(_this4._instances);
            });
            this._raf = null;
          }
        }
      }, {
        key: "on",
        value: function on(event, handler) {
          if (this._handlers[event]) {
            this._handlers[event].push(handler);
          } else {
            console.warn("Unsupported event " + event + ".");
          }
        }
      }, {
        key: "off",
        value: function off(event, handler) {
          var _this5 = this;
          if (event != null) {
            if (handler != null) {
              if (this._handlers[event] && this._handlers[event].filter(function(savedHandler) {
                return savedHandler === handler;
              }).length) {
                var toRemove = this._handlers[event].filter(function(savedHandler) {
                  return savedHandler === handler;
                })[0];
                var index = this._handlers[event].indexOf(toRemove);
                if (index > -1) {
                  this._handlers[event].splice(index, 1);
                }
              } else {
                console.warn("Handler for event " + event + " no found.");
              }
            } else {
              this._handlers[event] = [];
            }
          } else {
            Object.keys(this._handlers).forEach(function(keys) {
              _this5._handlers[keys] = [];
            });
          }
        }
      }]);
      return Kinet2;
    }();
    exports.default = Kinet;
    var KinetItem = function() {
      function KinetItem2(intitalValue, acceleration, friction) {
        _classCallCheck(this, KinetItem2);
        this.current = intitalValue;
        this.target = intitalValue;
        this._acceleration = acceleration;
        this._friction = friction;
        this.velocity = 0;
      }
      _createClass(KinetItem2, [{
        key: "update",
        value: function update() {
          var distance = this.target - this.current;
          var attraction = distance * this._acceleration;
          this.applyForce(attraction);
          this.velocity *= this._friction;
          this.current += this.velocity;
          return distance;
        }
      }, {
        key: "applyForce",
        value: function applyForce(force) {
          this.velocity += force;
        }
      }]);
      return KinetItem2;
    }();
  }
});

// node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.negative = exports.positive = exports.isGradient = exports.convertColor = exports.extractRgbFromRgb = exports.extractRgbFromHex = void 0;
    var extractRgbFromHex = function(hex) {
      var r = parseInt(hex.slice(1, 3), 16);
      var g = parseInt(hex.slice(3, 5), 16);
      var b = parseInt(hex.slice(5, 7), 16);
      return { r, g, b };
    };
    exports.extractRgbFromHex = extractRgbFromHex;
    var extractRgbFromRgb = function(rgb) {
      var match = /rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)/.exec(rgb);
      if (match === null) {
        throw new Error("Couldn't convert color string " + rgb);
      }
      return {
        r: parseInt(match[1]),
        g: parseInt(match[2]),
        b: parseInt(match[3])
      };
    };
    exports.extractRgbFromRgb = extractRgbFromRgb;
    var convertColor = function(color) {
      if (color.includes("rgb")) {
        return exports.extractRgbFromRgb(color);
      } else if (color.startsWith("#")) {
        return exports.extractRgbFromHex(color);
      }
      throw new Error("Couldn't convert color string " + color);
    };
    exports.convertColor = convertColor;
    var isGradient = function(color) {
      return Array.isArray(color);
    };
    exports.isGradient = isGradient;
    var positive = function(n) {
      return Math.max(n, 0);
    };
    exports.positive = positive;
    var negative = function(n) {
      return Math.min(n, 0);
    };
    exports.negative = negative;
  }
});

// node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/Magnetic.js
var require_Magnetic = __commonJS({
  "node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/Magnetic.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var kinet_1 = __importDefault(require_lib());
    var throttle_1 = __importDefault(require_throttle());
    var Magnetic = (
      /** @class */
      function() {
        function Magnetic2(element) {
          var _this = this;
          this.destroying = false;
          this.onTick = null;
          this.destroy = function() {
            window.removeEventListener("mousemove", _this.throttledMouseMove);
            _this.destroying = true;
            _this.kinetInstance.animate("x", 0);
            _this.kinetInstance.animate("y", 0);
          };
          this.mouseMove = function(event) {
            var distance = _this.getDistance(event.clientX + window.scrollX, event.clientY + window.scrollY);
            _this.render(distance, -1 * (_this.center.x - event.clientX - window.scrollX), -1 * (_this.center.y - event.clientY - window.scrollY));
          };
          this.kinetInstance = new kinet_1.default({
            names: ["x", "y"],
            acceleration: 0.1,
            friction: 0.4
          });
          this.element = element;
          this.rect = this.element.getBoundingClientRect();
          this.center = {
            x: this.rect.x + window.scrollX + this.element.offsetWidth / 2,
            y: this.rect.y + window.scrollY + this.element.offsetHeight / 2
          };
          this.maxDistanceX = this.element.offsetWidth / 2;
          this.maxDistanceY = this.element.offsetWidth / 2;
          this.throttledMouseMove = throttle_1.default(this.mouseMove);
          window.addEventListener("mousemove", this.throttledMouseMove, {
            passive: true
          });
          this.kinetInstance.on("tick", function(instances) {
            _this.element.style.transform = "translate3d(" + instances.x.current + "px, " + instances.y.current + "px, 0) rotateY(" + instances.x.current / 2 + "deg) rotateX(" + instances.y.current / 2 + "deg)";
            _this.onTick && _this.onTick();
          });
          this.kinetInstance.on("end", function() {
            if (_this.destroying) {
              _this.element.style.transform = "";
            }
          });
        }
        Magnetic2.prototype.getDistance = function(x, y) {
          return Math.round(Math.sqrt(Math.pow(this.center.x - x, 2) + Math.pow(this.center.y - y, 2)));
        };
        Magnetic2.prototype.render = function(distance, x, y) {
          if (Math.abs(x) < this.maxDistanceX && Math.abs(y) < this.maxDistanceY) {
            var percentX = x / this.maxDistanceX;
            var percentY = y / this.maxDistanceY;
            this.kinetInstance.animate("x", Math.round(20 * percentX));
            this.kinetInstance.animate("y", Math.round(20 * percentY));
          } else {
            this.kinetInstance.animate("x", 0);
            this.kinetInstance.animate("y", 0);
          }
        };
        return Magnetic2;
      }()
    );
    exports.default = Magnetic;
  }
});

// node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/Blobity.js
var require_Blobity = __commonJS({
  "node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/Blobity.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var throttle_1 = __importDefault(require_throttle());
    var kinet_1 = __importDefault(require_lib());
    var helpers_1 = require_helpers();
    var Magnetic_1 = __importDefault(require_Magnetic());
    var Blobity = (
      /** @class */
      function() {
        function Blobity2(options) {
          var _this = this;
          this.options = {
            color: "rgb(180, 180, 180)",
            opacity: 1,
            licenseKey: null,
            size: 40,
            focusableElements: "[data-blobity], a:not([data-no-blobity]), button:not([data-no-blobity]), [data-blobity-tooltip]",
            focusableElementsOffsetX: 0,
            focusableElementsOffsetY: 0,
            zIndex: -1,
            invert: false,
            dotColor: null,
            dotSize: 8,
            magnetic: true,
            mode: "normal",
            radius: 4,
            font: "sans-serif",
            fontWeight: 400,
            fontSize: 40,
            fontColor: "#000000",
            tooltipPadding: 12,
            kineticMorphing: true
          };
          this.initialized = false;
          this.color = { r: 0, g: 0, b: 0 };
          this.fontColor = { r: 0, g: 0, b: 0 };
          this.stickedToElement = null;
          this.sticketToElementTooltip = null;
          this.disablingStickedToElementTimeout = null;
          this.isActive = true;
          this.destroyed = false;
          this.currentMagnetic = null;
          this.kinetPresets = {
            normal: {
              acceleration: 0.1,
              friction: 0.35
            },
            bouncy: {
              acceleration: 0.1,
              friction: 0.28
            },
            slow: {
              acceleration: 0.06,
              friction: 0.35
            }
          };
          this.lastKnownCoordinates = { x: 0, y: 0 };
          this.currentOffsetX = 0;
          this.currentOffsetY = 0;
          this.manuallySetFocusedElement = null;
          this.manuallySetTooltipText = null;
          this.disableTimeStamp = (/* @__PURE__ */ new Date()).getTime();
          this.reduceMotionSetting = false;
          this.kinetDefaultMethod = "animate";
          this.updateOptions = function(newOptions) {
            _this.options = __assign(__assign({}, _this.options), newOptions);
            if (Array.isArray(_this.options.color)) {
              _this.color = _this.options.color.map(function(color) {
                return helpers_1.convertColor(color);
              });
            } else {
              _this.color = helpers_1.convertColor(_this.options.color);
            }
            _this.fontColor = helpers_1.convertColor(_this.options.fontColor);
            if (_this.options.invert) {
              _this.color = helpers_1.convertColor("rgb(255, 255, 255)");
            }
            if (_this.options.dotColor) {
              if (_this.globalStyles) {
                document.head.removeChild(_this.globalStyles);
                _this.globalStyles = void 0;
              }
              if (!_this.globalStyles) {
                var dot = '<svg xmlns="http://www.w3.org/2000/svg" width="' + _this.options.dotSize + '" height="' + _this.options.dotSize + '"\n                viewBox="0 0 8 8"><circle cx="4" cy="4" r="4" fill-rule="evenodd" fill="' + _this.options.dotColor + '"/></svg>';
                _this.globalStyles = document.createElement("style");
                _this.globalStyles.setAttribute("data-blobity-global-styles", "");
                _this.globalStyles.appendChild(document.createTextNode("* {cursor: inherit}"));
                _this.globalStyles.appendChild(document.createTextNode("html { cursor: url(data:image/svg+xml;base64," + btoa(dot) + ") " + _this.options.dotSize / 2 + " " + _this.options.dotSize / 2 + ", auto;}"));
                document.head.appendChild(_this.globalStyles);
              }
            } else {
              if (_this.globalStyles) {
                document.head.removeChild(_this.globalStyles);
              }
              _this.globalStyles = void 0;
            }
            _this.canvas.style.cssText = "\n            position: fixed;\n            z-index: -1;\n            top: 0;\n            left: 0;\n            pointer-events: none;\n            opacity: 1;\n            will-change: transform;\n            overflow: visible;\n            opacity: " + _this.options.opacity + "; \n            z-index: " + (_this.options.invert ? 2147483647 : _this.options.zIndex) + "; \n            " + (_this.options.invert && "mix-blend-mode: difference") + ";\n        ";
            _this.currentOffsetX = _this.options.focusableElementsOffsetX;
            _this.currentOffsetY = _this.options.focusableElementsOffsetY;
            _this.resize();
            if (_this.kinetInstance) {
              Object.entries(_this.kinetInstance._instances).filter(function(_a) {
                var _b = __read(_a, 1), name = _b[0];
                return name !== "scale";
              }).forEach(function(_a) {
                var _b = __read(_a, 2), instance = _b[1];
                instance._friction = 1 - _this.kinetPresets[_this.options.mode].friction;
                instance._acceleration = _this.kinetPresets[_this.options.mode].acceleration;
              });
              if (!_this.stickedToElement && !_this.sticketToElementTooltip) {
                if (newOptions.radius !== void 0) {
                  _this.kinetInstance[_this.kinetDefaultMethod]("radius", _this.options.radius);
                }
                _this.kinetInstance[_this.kinetDefaultMethod]("width", _this.options.size);
                _this.kinetInstance[_this.kinetDefaultMethod]("height", _this.options.size);
                _this.kinetInstance[_this.kinetDefaultMethod]("x", _this.lastKnownCoordinates.x - _this.options.size / 2);
                _this.kinetInstance[_this.kinetDefaultMethod]("y", _this.lastKnownCoordinates.y - _this.options.size / 2);
              }
            }
          };
          this.destroy = function() {
            if (_this.destroyed) {
              return;
            }
            window.removeEventListener("resize", _this.resize);
            window.removeEventListener("mousemove", _this.throttledMouseMove);
            document.removeEventListener("mouseenter", _this.windowMouseEnter);
            document.removeEventListener("mouseleave", _this.windowMouseLeave);
            document.removeEventListener("mouseover", _this.focusableElementMouseEnter);
            document.removeEventListener("mouseout", _this.focusableElementMouseLeave);
            document.removeEventListener("touchstart", _this.disable);
            document.removeEventListener("touchend", _this.disable);
            document.removeEventListener("mousemove", _this.enable);
            _this.prefersReducedMotionMediaQuery.removeEventListener("change", _this.updatePrefersReducedMotionSetting);
            document.body.removeChild(_this.canvas);
            document.documentElement.style.cursor = "";
            if (_this.globalStyles) {
              document.head.removeChild(_this.globalStyles);
            }
            _this.destroyed = true;
          };
          this.disable = function() {
            _this.disableTimeStamp = (/* @__PURE__ */ new Date()).getTime();
            _this.isActive = false;
            _this.clear();
          };
          this.enable = function() {
            var disableAge = (/* @__PURE__ */ new Date()).getTime() - _this.disableTimeStamp;
            if (disableAge > 16) {
              _this.isActive = true;
            }
          };
          this.updatePrefersReducedMotionSetting = function() {
            _this.reduceMotionSetting = _this.prefersReducedMotionMediaQuery.matches;
            _this.kinetDefaultMethod = _this.reduceMotionSetting ? "set" : "animate";
          };
          this.focusElement = function(element) {
            _this.manuallySetTooltipText = null;
            _this.manuallySetFocusedElement = element;
            _this.highlightElement(element);
          };
          this.showTooltip = function(text) {
            _this.manuallySetFocusedElement = null;
            _this.manuallySetTooltipText = text;
            _this.displayTooltip(text, _this.lastKnownCoordinates.x, _this.lastKnownCoordinates.y);
          };
          this.reset = function() {
            _this.manuallySetFocusedElement = null;
            _this.manuallySetTooltipText = null;
            if (_this.activeTooltip) {
              _this.displayTooltip(_this.activeTooltip, _this.lastKnownCoordinates.x, _this.lastKnownCoordinates.y);
              return;
            }
            if (_this.activeFocusedElement) {
              _this.highlightElement(_this.activeFocusedElement);
              return;
            }
            _this.resetMorph(_this.lastKnownCoordinates.x - _this.options.size / 2, _this.lastKnownCoordinates.y - _this.options.size / 2);
          };
          this.focusableElementMouseEnter = function(event) {
            if (_this.isActive && event.target) {
              var element_1 = event.target.closest(_this.options.focusableElements);
              if (element_1) {
                _this.stickedToElement = element_1;
                var tooltip = element_1.getAttribute("data-blobity-tooltip");
                if (element_1 && tooltip != void 0) {
                  _this.sticketToElementTooltip = tooltip;
                }
                _this.currentOffsetX = element_1.getAttribute("data-blobity-offset-x") ? parseInt(String(element_1.getAttribute("data-blobity-offset-x"))) : _this.options.focusableElementsOffsetX;
                _this.currentOffsetY = element_1.getAttribute("data-blobity-offset-y") ? parseInt(String(element_1.getAttribute("data-blobity-offset-y"))) : _this.options.focusableElementsOffsetY;
                _this.stickedToElementMutationObserver.observe(document.body, {
                  childList: true,
                  subtree: true
                });
                var magnetic = element_1.getAttribute("data-blobity-magnetic");
                if (!_this.reduceMotionSetting) {
                  if (magnetic === "true" || _this.options.magnetic && magnetic !== "false") {
                    _this.currentMagnetic = new Magnetic_1.default(element_1);
                    _this.currentMagnetic.onTick = function() {
                      if (!_this.activeTooltip && _this.activeFocusedElement === element_1) {
                        var _a = element_1.getBoundingClientRect(), width = _a.width, height = _a.height, x = _a.x, y = _a.y;
                        var radius = element_1.getAttribute("data-blobity-radius");
                        _this.kinetInstance[_this.kinetDefaultMethod]("textOpacity", 0);
                        _this.morph({
                          width: width + _this.currentOffsetX * 2,
                          height: height + _this.currentOffsetY * 2,
                          x: x - _this.currentOffsetX,
                          y: y - _this.currentOffsetY
                        }, radius != void 0 ? parseInt(radius) : _this.options.radius);
                      }
                    };
                  }
                }
              }
            }
          };
          this.focusableElementMouseLeave = function(event) {
            if (event.target) {
              var element = event.target.closest(_this.options.focusableElements);
              if (element) {
                _this.resetStickedToElement();
                _this.resetStickedToElementMutationObserver();
                _this.currentOffsetX = _this.options.focusableElementsOffsetX;
                _this.currentOffsetY = _this.options.focusableElementsOffsetY;
                _this.resetMagnetic();
                _this.resetMorph(event.clientX, event.clientY);
              }
            }
          };
          this.mouseDown = function() {
            _this.kinetInstance[_this.kinetDefaultMethod]("scale", 97);
          };
          this.mouseUp = function() {
            _this.bounce();
          };
          this.windowMouseEnter = function() {
            _this.kinetInstance[_this.kinetDefaultMethod]("opacity", 1);
          };
          this.windowMouseLeave = function() {
            _this.kinetInstance[_this.kinetDefaultMethod]("opacity", 0);
          };
          this.highlightElement = function(element) {
            var _a = element.getBoundingClientRect(), width = _a.width, height = _a.height, x = _a.x, y = _a.y;
            var radius = element.getAttribute("data-blobity-radius");
            _this.kinetInstance[_this.kinetDefaultMethod]("textOpacity", 0);
            _this.morph({
              width: width + _this.currentOffsetX * 2,
              height: height + _this.currentOffsetY * 2,
              x: x - _this.currentOffsetX,
              y: y - _this.currentOffsetY
            }, radius != void 0 ? parseInt(radius) : _this.options.radius);
          };
          this.displayTooltip = function(text, x, y) {
            _this.ctx.font = _this.options.fontWeight + " " + _this.options.fontSize + "px " + _this.options.font;
            _this.ctx.textBaseline = "bottom";
            _this.ctx.textAlign = "left";
            var _a = _this.ctx.measureText(text), actualBoundingBoxAscent = _a.actualBoundingBoxAscent, width = _a.width;
            var padding = _this.options.tooltipPadding * 2;
            _this.kinetInstance[_this.kinetDefaultMethod]("textOpacity", 100);
            _this.morph({
              x: x + 6,
              y: y + 6,
              width: width + padding,
              height: actualBoundingBoxAscent + padding
            }, 4);
          };
          this.mouseMove = function(event) {
            if (_this.initialized) {
              _this.lastKnownCoordinates = {
                x: event.clientX,
                y: event.clientY
              };
              if (_this.activeTooltip) {
                _this.displayTooltip(_this.activeTooltip, event.clientX, event.clientY);
              } else if (_this.activeFocusedElement) {
                _this.highlightElement(_this.activeFocusedElement);
              } else {
                _this.kinetInstance[_this.kinetDefaultMethod]("textOpacity", 0);
                _this.kinetInstance[_this.kinetDefaultMethod]("x", event.clientX - _this.options.size / 2);
                _this.kinetInstance[_this.kinetDefaultMethod]("y", event.clientY - _this.options.size / 2);
                _this.kinetInstance[_this.kinetDefaultMethod]("width", _this.options.size);
                _this.kinetInstance[_this.kinetDefaultMethod]("height", _this.options.size);
                _this.kinetInstance[_this.kinetDefaultMethod]("radius", _this.options.size / 2);
              }
            } else {
              _this.initialized = true;
              _this.kinetInstance.set("x", event.clientX - _this.options.size / 2);
              _this.kinetInstance.set("y", event.clientY - _this.options.size / 2);
              _this.kinetInstance[_this.kinetDefaultMethod]("opacity", 1);
            }
          };
          this.resetMorph = function(x, y) {
            _this.disablingStickedToElementTimeout = setTimeout(function() {
              _this.kinetInstance[_this.kinetDefaultMethod]("width", _this.options.size);
              _this.kinetInstance[_this.kinetDefaultMethod]("height", _this.options.size);
              _this.kinetInstance[_this.kinetDefaultMethod]("radius", _this.options.size / 2);
              _this.kinetInstance[_this.kinetDefaultMethod]("x", x);
              _this.kinetInstance[_this.kinetDefaultMethod]("y", y);
            });
          };
          this.clear = function() {
            _this.ctx.resetTransform();
            _this.ctx.rotate(0);
            _this.ctx.clearRect(-20, -20, window.innerWidth * window.devicePixelRatio + 20, window.innerHeight * window.devicePixelRatio + 20);
          };
          this.resize = function() {
            _this.ctx.canvas.style.width = window.innerWidth + "px";
            _this.ctx.canvas.style.height = window.innerHeight + "px";
            _this.ctx.canvas.width = window.innerWidth * window.devicePixelRatio;
            _this.ctx.canvas.height = window.innerHeight * window.devicePixelRatio;
            if (window.devicePixelRatio > 1) {
              _this.ctx.imageSmoothingEnabled = false;
            }
          };
          this.resetStickedToElement = function() {
            _this.stickedToElement = null;
            _this.sticketToElementTooltip = null;
          };
          this.resetStickedToElementMutationObserver = function() {
            _this.stickedToElementMutationObserver.disconnect();
          };
          this.resetMagnetic = function() {
            if (_this.currentMagnetic) {
              _this.currentMagnetic.destroy();
              _this.currentMagnetic.onTick = null;
              _this.currentMagnetic = null;
            }
          };
          this.canvas = document.createElement("canvas");
          document.body.appendChild(this.canvas);
          this.ctx = this.canvas.getContext("2d");
          this.updateOptions(__assign({}, options));
          if (!this.options.licenseKey) {
            console.warn("Valid license number for Blobity is required. You can get one at https://blobity.gmrchk.com.");
          }
          this.kinetInstance = new kinet_1.default({
            names: [
              "x",
              "y",
              "opacity",
              "textOpacity",
              "width",
              "height",
              "radius",
              "scale"
            ],
            acceleration: this.kinetPresets[this.options.mode].acceleration,
            friction: this.kinetPresets[this.options.mode].friction
          });
          this.kinetInstance._instances.scale._acceleration = 0.06;
          this.kinetInstance._instances.scale._friction = 1 - 0.1;
          this.kinetInstance.set("x", window.innerWidth / 2);
          this.kinetInstance.set("y", window.innerHeight / 2);
          this.kinetInstance.set("width", this.options.size);
          this.kinetInstance.set("height", this.options.size);
          this.kinetInstance.set("opacity", 0);
          this.kinetInstance.set("textOpacity", 0);
          this.kinetInstance.set("radius", this.options.size / 2);
          this.kinetInstance.set("scale", 100);
          this.kinetInstance.on("tick", function(instances) {
            _this.render(instances.x.current, instances.y.current, instances.width.current, instances.height.current, instances.radius.current, instances.x.velocity, instances.y.velocity, instances.opacity.current, instances.scale.current, instances.textOpacity.current);
          });
          this.throttledMouseMove = throttle_1.default(this.mouseMove);
          window.addEventListener("resize", this.resize, { passive: true });
          this.resize();
          window.addEventListener("mousemove", this.throttledMouseMove, {
            passive: true
          });
          document.addEventListener("mouseenter", this.windowMouseEnter);
          document.addEventListener("mouseleave", this.windowMouseLeave);
          document.addEventListener("mouseover", this.focusableElementMouseEnter);
          document.addEventListener("mouseout", this.focusableElementMouseLeave);
          document.addEventListener("mousedown", this.mouseDown);
          document.addEventListener("mouseup", this.mouseUp);
          document.addEventListener("touchstart", this.disable);
          document.addEventListener("touchend", this.disable);
          document.addEventListener("mousemove", this.enable, {
            passive: true
          });
          this.prefersReducedMotionMediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
          this.prefersReducedMotionMediaQuery.addEventListener("change", this.updatePrefersReducedMotionSetting);
          this.updatePrefersReducedMotionSetting();
          this.stickedToElementMutationObserver = new MutationObserver(function(mutations) {
            var e_1, _a, e_2, _b;
            try {
              for (var mutations_1 = __values(mutations), mutations_1_1 = mutations_1.next(); !mutations_1_1.done; mutations_1_1 = mutations_1.next()) {
                var mutation = mutations_1_1.value;
                try {
                  for (var _c = (e_2 = void 0, __values(mutation.removedNodes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var el = _d.value;
                    if (el === _this.stickedToElement || el.contains(_this.stickedToElement)) {
                      _this.resetStickedToElement();
                      _this.resetStickedToElementMutationObserver();
                      _this.resetMagnetic();
                      _this.reset();
                    }
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (mutations_1_1 && !mutations_1_1.done && (_a = mutations_1.return)) _a.call(mutations_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          });
        }
        Blobity2.prototype.bounce = function() {
          if (this.reduceMotionSetting) {
            this.kinetInstance.set("scale", 100);
          } else {
            this.kinetInstance.set("scale", 97);
            this.kinetInstance._instances.scale.velocity = 3;
            this.kinetInstance.animate("scale", 100);
          }
        };
        Object.defineProperty(Blobity2.prototype, "activeTooltip", {
          get: function() {
            return this.manuallySetTooltipText || this.sticketToElementTooltip;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Blobity2.prototype, "activeFocusedElement", {
          get: function() {
            return this.manuallySetFocusedElement || this.stickedToElement;
          },
          enumerable: false,
          configurable: true
        });
        Blobity2.prototype.morph = function(_a, radius) {
          var width = _a.width, height = _a.height, x = _a.x, y = _a.y;
          if (this.disablingStickedToElementTimeout) {
            clearTimeout(this.disablingStickedToElementTimeout);
          }
          this.kinetInstance[this.kinetDefaultMethod]("radius", radius);
          this.kinetInstance[this.kinetDefaultMethod]("width", width);
          this.kinetInstance[this.kinetDefaultMethod]("height", height);
          this.kinetInstance[this.kinetDefaultMethod]("x", x);
          this.kinetInstance[this.kinetDefaultMethod]("y", y);
        };
        Blobity2.prototype.render = function(x, y, width, height, radius, velocityX, velocityY, opacity, scale, textOpacity) {
          this.clear();
          var maxDelta = this.activeFocusedElement ? 0 : this.options.size / 8 * 7;
          x = x * window.devicePixelRatio;
          y = y * window.devicePixelRatio;
          width = (this.activeTooltip ? width : Math.max(width, maxDelta)) * window.devicePixelRatio;
          height = (this.activeTooltip ? height : Math.max(height, maxDelta)) * window.devicePixelRatio;
          radius = radius * window.devicePixelRatio;
          velocityX = velocityX * window.devicePixelRatio;
          velocityY = velocityY * window.devicePixelRatio;
          if (this.isActive) {
            var ctx = this.ctx;
            ctx.globalAlpha = opacity;
            ctx.setTransform(scale / 100, 0, 0, scale / 100, x, y);
            ctx.translate(width, height);
            ctx.scale(scale / 100, scale / 100);
            ctx.translate(-width, -height);
            var activateBlur = this.options.kineticMorphing && Math.abs(width - this.options.size * window.devicePixelRatio) < 2 && Math.abs(height - this.options.size * window.devicePixelRatio) < 2 && Math.abs(radius - this.options.size * window.devicePixelRatio / 2) < 2;
            if (activateBlur) {
              var angle = Math.atan2(velocityY, velocityX) * 180 / Math.PI + 180;
              ctx.translate(radius, radius);
              ctx.rotate(angle * Math.PI / 180);
              ctx.translate(-radius, -radius);
            }
            var cumulativeVelocity = activateBlur ? Math.min(
              Math.sqrt(Math.pow(Math.abs(velocityX), 2) + Math.pow(Math.abs(velocityY), 2)) * 2,
              // so the distortion starts sooner
              60
              // shape becomes too distorted once velocity is too big
            ) / 2 : 0;
            ctx.beginPath();
            ctx.moveTo(radius, 0);
            ctx.arcTo(width + cumulativeVelocity, cumulativeVelocity / 2, width + cumulativeVelocity, height + cumulativeVelocity / 2, helpers_1.positive(radius - cumulativeVelocity / 2));
            ctx.arcTo(width + cumulativeVelocity, height - cumulativeVelocity / 2, cumulativeVelocity, height - cumulativeVelocity / 2, helpers_1.positive(radius - cumulativeVelocity / 2));
            ctx.arcTo(0, height, 0, 0, helpers_1.positive(radius));
            ctx.arcTo(0, 0, width, 0, helpers_1.positive(radius));
            ctx.closePath();
            if (helpers_1.isGradient(this.color)) {
              var gradient_1 = ctx.createLinearGradient(0, 0, width, height);
              var length_1 = this.color.length;
              this.color.forEach(function(color, index) {
                gradient_1.addColorStop(1 / (length_1 - 1) * index, "rgb(" + color.r + ", " + color.g + ", " + color.b + ")");
              });
              ctx.fillStyle = gradient_1;
            } else {
              ctx.fillStyle = "rgb(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ")";
            }
            ctx.fill();
            if (this.activeTooltip) {
              ctx.setTransform(scale / 100, 0, 0, scale / 100, x, y);
              this.ctx.textBaseline = "top";
              this.ctx.textAlign = "left";
              this.ctx.font = this.options.fontWeight + " " + this.options.fontSize * window.devicePixelRatio * (scale / 100) + "px " + this.options.font;
              ctx.fillStyle = "rgba(\n                    " + this.fontColor.r + ", " + this.fontColor.g + ", \n                    " + this.fontColor.b + ", " + textOpacity / 100 + ")";
              ctx.fillText(this.activeTooltip, this.options.tooltipPadding * window.devicePixelRatio - (scale - 100) / 100 * width, this.options.tooltipPadding * window.devicePixelRatio - (scale - 100) / 100 * height);
            }
          }
        };
        return Blobity2;
      }()
    );
    exports.default = Blobity;
  }
});

// node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/react/useBlobity.js
var require_useBlobity = __commonJS({
  "node_modules/.pnpm/blobity@0.2.3_react@19.1.1/node_modules/blobity/lib/react/useBlobity.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var Blobity_1 = __importDefault(require_Blobity());
    exports.default = function(options) {
      var instance = react_1.useRef(null);
      react_1.useEffect(function() {
        if (!instance.current) {
          instance.current = new Blobity_1.default(options);
        }
      }, []);
      return instance;
    };
  }
});
export default require_useBlobity();
//# sourceMappingURL=blobity_lib_react_useBlobity.js.map
